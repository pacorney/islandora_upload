<?php
/**
 * @file
 *
 *
 *
 *
 */

// Load fedora_item.inc from the fedora_repository module in the api folder.
module_load_include('inc', 'fedora_repository', 'api/fedora_item');

// Load islandora_upload_perrmissions.inc from the islandora_upload module.
module_load_include('inc', 'islandora_upload', 'islandora_upload_perrmissions');
/**
 * Implementation of hook_help().
 */
function islandora_upload_help($path, $arg) {
  switch ($path) {
    case 'admin/help#islandora_upload':
      $output = '<p>'. t('Islandora Upload Module') .'</p>';
      return $output;
    case 'admin/settings/uploads':
      return '<p>'. t('Users with the <a href="@permissions">attach files permission</a> can upload attachments. Users with the <a href="@permissions">view attached files permission</a> can view uploaded attachments. You can choose which post types can take attachments on the <a href="@types">content types settings</a> page.', array('@permissions' => url('admin/user/permissions', array('fragment' => 'module-islandora_upload')), '@types' => url('admin/content/types'))) .'</p>';
  }
}

/**
 * Implementation of hook_theme().
 */
function islandora_upload_theme() {
  return array(
    'islandora_upload_attachments' => array(
      'arguments' => array('files' => NULL),
    ),
    'islandora_upload_form_current' => array(
      'arguments' => array('form' => NULL),
    ),
    'islandora_upload_form_new' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_link().
 */
function islandora_upload_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

  // Display a link with the number of attachments
  if ($teaser && $type == 'node' && isset($node->files) && user_access('view attached files')) {
    $num_files = 0;
    foreach ($node->files as $file) {
      if ($file->list) {
        $num_files++;
      }
    }
    if ($num_files) {
      $links['islandora_upload_attachments'] = array(
        'title' => format_plural($num_files, '1 attachment', '@count attachments'),
        'href' => "node/$node->nid",
        'attributes' => array('title' => t('Read full article to view attachments.')),
        'fragment' => 'attachments'
      );
    }
  }

  return $links;
}

/**
 * Implementation of hook_perm().
 */
function islandora_upload_perm() {
  return array('attach files', 'view attached files');
}

/**
 * Implementation of hook_menu().
 */
function islandora_upload_menu() {
  $items = array();

  $items['islandora_upload/js'] = array(
    'page callback' => 'islandora_upload_js',
    'access arguments' => array('attach files'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/islandorauploads'] = array(
    'title' => 'Islandora Upload',
    'description' => 'Control how files may be attached to content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_upload_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'islandora_upload.admin.inc',
  );
  $items['node/islandora_file_permissions'] = array(
    'title' => t('Set File Access Permissions'),
    'page callback' => 'islandora_upload_permissions_form',
    'description' => t('Set File Access Permissions'),
    'access arguments' => array('attach files'),
    'type' => MENU_CALLBACK,
  );
  $items['filepermissions/get'] = array(
    'title' => 'Permissions',
    'page callback' => 'islandora_upload_get_by_file_id',
    'access arguments' => array('attach files'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function islandora_upload_menu_alter(&$items) {
  $items['system/files']['access arguments'] = array('view attached files');
}

/**
 * Theme the attachments list.
 *
 * @ingroup themeable
 */
function theme_islandora_upload_form_current($form) {
  $header = array(t(''), t('Delete'), t('Description'), t('Weight'), t('Mime Type'), t('Size'));
  drupal_add_tabledrag('upload-attachments', 'order', 'sibling', 'upload-weight');

  foreach (element_children($form) as $key) {
    // Add class to group weight fields for drag and drop.
    $form[$key]['weight']['#attributes']['class'] = 'upload-weight';

    $row = array('');
    $row[] = drupal_render($form[$key]['remove']);
    //$row[] = drupal_render($form[$key]['list']);
    $row[] = drupal_render($form[$key]['description']);
    $row[] = drupal_render($form[$key]['weight']);
    $row[] = drupal_render($form[$key]['mimetype']);
    $row[] = drupal_render($form[$key]['size']);
    $rows[] = array('data' => $row, 'class' => 'draggable');
  }
  $output = theme('table', $header, $rows, array('id' => 'upload-attachments'));
  $output .= drupal_render($form);
  return $output;
}

/**
 * Theme the attachment form.
 * Note: required to output prefix/suffix.
 *
 * @ingroup themeable
 */
function theme_islandora_upload_form_new($form) {
  drupal_add_tabledrag('upload-attachments', 'order', 'sibling', 'upload-weight');
  $output = drupal_render($form);
  return $output;
}

/**
 * Determine the limitations on files that a given user may upload. The user
 * may be in multiple roles so we select the most permissive limitations from
 * all of their roles.
 *
 * @param $user
 *   A Drupal user object.
 * @return
 *   An associative array with the following keys:
 *     'extensions'
 *       A white space separated string containing all the file extensions this
 *       user may upload.
 *     'file_size'
 *       The maximum size of a file upload in bytes.
 *     'user_size'
 *       The total number of bytes for all for a user's files.
 *     'resolution'
 *       A string specifying the maximum resolution of images.
 */
function _islandora_upload_file_limits($user) {
  $file_limit = variable_get('upload_uploadsize_default', 1);
  $user_limit = variable_get('upload_usersize_default', 1);
  $all_extensions = explode(' ', variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'));
  foreach ($user->roles as $rid => $name) {
    $extensions = variable_get("upload_extensions_$rid", variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp'));
    $all_extensions = array_merge($all_extensions, explode(' ', $extensions));

    // A zero value indicates no limit, take the least restrictive limit.
    $file_size = variable_get("upload_uploadsize_$rid", variable_get('upload_uploadsize_default', 1)) * 1024 * 1024;
    $file_limit = ($file_limit && $file_size) ? max($file_limit, $file_size) : 0;

    $user_size = variable_get("upload_usersize_$rid", variable_get('upload_usersize_default', 1)) * 1024 * 1024;
    $user_limit = ($user_limit && $user_size) ? max($user_limit, $user_size) : 0;
  }
  $all_extensions = implode(' ', array_unique($all_extensions));
  return array(
    'extensions' => $all_extensions,
    'file_size' => $file_limit,
    'user_size' => $user_limit,
    'resolution' => variable_get('upload_max_resolution', 0),
  );
}


/**
 * Save new uploads and store them in the session to be associated to the node
 * on islandora_upload_save.
 *
 * @param $node
 *   A node object to associate with uploaded files.
 */
function islandora_upload_node_form_submit(&$form, &$form_state) {
  global $user;

  $limits = _islandora_upload_file_limits($user);
  $validators = array(
    'file_validate_extensions' => array($limits['extensions']),
    'file_validate_image_resolution' => array($limits['resolution']),
    'file_validate_size' => array($limits['file_size'], $limits['user_size']),
  );

  if (user_access('attach files')) {
    $file = file_save_upload('upload', $validators, file_directory_path());
    $check = islandora_check_mime($file);

    if (!empty($check)) {
    drupal_set_message("$check", 'error');
    file_delete($file->filepath);
    db_query("DELETE FROM {attach_files} WHERE fid = %d", $fid);
    }
  else {
    if (!empty($file)) {

  // Save new file uploads.
    $file->list = variable_get('upload_list_default', 1);
    $file->description = $file->filename;
    $file->weight = 0;
    $file->new = TRUE;
    $form['#node']->files[$file->fid] = $file;
    $form_state['values']['files'][$file->fid] = (array)$file;
  }}
  if (isset($form_state['values']['files'])) {
    foreach ($form_state['values']['files'] as $fid => $file) {
      // If the node was previewed prior to saving, $form['#node']->files[$fid]
      // is an array instead of an object. Convert file to object for compatibility.
      $form['#node']->files[$fid] = (object) $form['#node']->files[$fid];
      $form_state['values']['files'][$fid]['new'] = !empty($form['#node']->files[$fid]->new);
    }
  }

  // Order the form according to the set file weight values.
  if (!empty($form_state['values']['files'])) {
    $microweight = 0.001;
    foreach ($form_state['values']['files'] as $fid => $file) {
      if (is_numeric($fid)) {
        $form_state['values']['files'][$fid]['#weight'] = $file['weight'] + $microweight;
        $microweight += 0.001;
      }
    }
    uasort($form_state['values']['files'], 'element_sort');
  }

  }
}
/**
 * Implementation of hook_file_download().
 */
function islandora_upload_file_download($filepath) {
  $filepath = file_create_path($filepath);
  $result = db_query("SELECT f.*, u.nid FROM {files} f INNER JOIN {attach_files} u ON f.fid = u.fid WHERE filepath = '%s'", $filepath);
  while ($file = db_fetch_object($result)) {
    if ($filepath !== $file->filepath) {
      // Since some database servers sometimes use a case-insensitive
      // comparison by default, double check that the filename is an exact
      // match.
      continue;
    }
    if (user_access('view attached files') && ($node = node_load($file->nid)) && node_access('view', $node)) {
      return array(
        'Content-Type: ' . $file->filemime,
        'Content-Length: ' . $file->filesize,
      );
    }
    else {
      return -1;
    }
  }
}



function _islandora_upload_form($node) {
  global $user;

  $form = array(
    '#theme' => 'islandora_upload_form_new',
    '#cache' => TRUE,
  );

  if (!empty($node->files) && is_array($node->files)) {
    $form['files']['#theme'] = 'islandora_upload_form_current';
    $form['files']['#tree'] = TRUE;
    foreach ($node->files as $key => $file) {
      $file = (object)$file;
      $description = file_create_url($file->filepath);
      $description = "<small>". check_plain($description) ."</small>";
      $form['files'][$key]['description'] = array('#type' => 'textfield', '#default_value' => !empty($file->description) ? $file->description : $file->filename, '#maxlength' => 256, '#description' => $description );
      $form['files'][$key]['mimetype'] = array('#value' => '{Mime Type}');
      $form['files'][$key]['size'] = array('#value' => format_size($file->filesize));
      $form['files'][$key]['remove'] = array('#type' => 'checkbox', '#default_value' => !empty($file->remove));
      //$form['files'][$key]['list'] = array('#type' => 'checkbox',  '#default_value' => $file->list);
      $form['files'][$key]['weight'] = array('#type' => 'weight', '#delta' => count($node->files), '#default_value' => $file->weight);
      $form['files'][$key]['filename'] = array('#type' => 'value',  '#value' => $file->filename);
      $form['files'][$key]['filepath'] = array('#type' => 'value',  '#value' => $file->filepath);
      $form['files'][$key]['filemime'] = array('#type' => 'value',  '#value' => $file->filemime);
      $form['files'][$key]['filesize'] = array('#type' => 'value',  '#value' => $file->filesize);
      $form['files'][$key]['fid'] = array('#type' => 'value',  '#value' => $file->fid);
      $form['files'][$key]['new'] = array('#type' => 'value', '#value' => FALSE);
    }
  }

  if (user_access('attach files')) {
    $limits = _islandora_upload_file_limits($user);
    $form['new']['#weight'] = 10;
    $form['new']['upload'] = array(
      '#type' => 'file',
      '#title' => t('Attach new file'),
      '#size' => 40,
      '#description' => ($limits['resolution'] ? t('Images are larger than %resolution will be resized. ', array('%resolution' => $limits['resolution'])) : '') . t('The maximum upload size is %filesize. Only files with the following extensions may be uploaded: %extensions. ', array('%extensions' => $limits['extensions'], '%filesize' => format_size($limits['file_size']))),
    );
    $form['new']['attach'] = array(
      '#type' => 'submit',
      '#value' => t('Attach'),
      '#name' => 'attach',
      '#ahah' => array(
        'path' => 'islandora_upload/js',
        'wrapper' => 'attach-wrapper',
        'progress' => array('type' => 'bar', 'message' => t('Please wait...')),
      ),
      '#submit' => array('node_form_submit_build_node'),
    );
  }

  return $form;
}


function islandora_upload_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    $form['workflow']['upload'] = array(
      '#type' => 'radios',
      '#title' => t('Attachments'),
      '#default_value' => variable_get('upload_'. $form['#node_type']->type, 1),
      '#options' => array(t('Disabled'), t('Enabled')),
    );
  }

  if (isset($form['type']) && isset($form['#node'])) {
    $node = $form['#node'];
    if ($form['type']['#value'] .'_node_form' == $form_id && variable_get("upload_$node->type", TRUE)) {
      // Attachments fieldset
      $form['attachments'] = array(
        '#type' => 'fieldset',
        //'#access' => user_access('attach files'),
        '#title' => t('Islandora attachments'),
        '#collapsible' => TRUE,
        '#collapsed' => empty($node->files),
        '#description' => t('Changes made to the attachments are not permanent until you save this post. The first "listed" file will be included in RSS feeds.'),
        '#prefix' => '<div class="attachments">',
        '#suffix' => '</div>',
        '#weight' => 30,
      );

      // Wrapper for fieldset contents (used by ahah.js).
      $form['attachments']['wrapper'] = array(
        '#prefix' => '<div id="attach-wrapper">',
        '#suffix' => '</div>',
      );

      // Make sure necessary directories for ialandora_upload.module exist and are
      // writable before displaying the attachment form.
      $path = file_directory_path();
      $temp = file_directory_temp();
      // Note: pass by reference
      if (!file_check_directory($path, FILE_CREATE_DIRECTORY) || !file_check_directory($temp, FILE_CREATE_DIRECTORY)) {
        $form['attachments']['#description'] =  t('File attachments are disabled. The file directories have not been properly configured.');
        /* if (user_access('administer site configuration')) {
          $form['attachments']['#description'] .= ' '. t('Please visit the <a href="@admin-file-system">file system configuration page</a>.', array('@admin-file-system' => url('admin/settings/file-system')));
        }
        else {
          $form['attachments']['#description'] .= ' '. t('Please contact the site administrator.');
        }*/
      }
      else {
        $form['attachments']['wrapper'] += _islandora_upload_form($node);
        $form['#attributes']['enctype'] = 'multipart/form-data';
      }
      $form['#submit'][] = 'islandora_upload_node_form_submit';
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */

function islandora_upload_nodeapi(&$node, $op, $teaser = NULL) {
  global $user;
  switch ($op) {

    case 'load':
      $output = '';
      if (variable_get("islandora_upload_$node->type", 1) == 1) {
        $output['files'] = islandora_upload_load($node);
        return $output;
      }
      break;

    case 'view':
      if (isset($node->files) && user_access('view attached files')) {
        // Add the attachments list to node body with a heavy
        // weight to ensure they're below other elements
        if (count($node->files)) {
          if (!$teaser && user_access('view attached files')) {
            $node->content['files'] = array(
              '#value' => theme('islandora_upload_attachments', $node->files),
              '#weight' => 50,
            );
          }
        }
      }

      break;

    case 'insert':
      if (user_access('upload files')) {
        islandora_upload_save($node, $user->uid);
      }
      if (count($node->files)) {
        $_REQUEST['destination'] = 'node/islandora_file_permissions/'. $node->nid;
      }
      break;
    case 'update':
      if (user_access('attach files')) {
        islandora_upload_save($node, $user->uid);
      }
      if (count($node->files)) {
        $_REQUEST['destination'] = 'node/islandora_file_permissions/'. $node->nid;
      }
      break;

    case 'delete':
      islandora_upload_delete($node);
      // if user has permission user purge else use delete
      islandora_upload_delete_fedora_objects($node, $user->uid);
      break;

    case 'delete revision':
      islandora_upload_delete_revision($node);
      break;

    case 'search result':
      return isset($node->files) && is_array($node->files) ? format_plural(count($node->files), '1 attachment', '@count attachments') : NULL;

    case 'rss item':
      if (is_array($node->files)) {
        $files = array();
        foreach ($node->files as $file) {
          if ($file->list) {
            $files[] = $file;
          }
        }
        if (count($files) > 0) {
          // RSS only allows one enclosure per item
          $file = array_shift($files);
          return array(
            array(
              'key' => 'enclosure',
              'attributes' => array(
                'url' => file_create_url($file->filepath),
                'length' => $file->filesize,
                'type' => $file->filemime
              )
            )
          );
        }
      }
      return array();
  }
}

/**
 * Displays file attachments in table
 *
 * @ingroup themeable
 */
function theme_islandora_upload_attachments($files) {
  $header = array(t('Attachment'), t('Size'));
  $rows = array();
  foreach ($files as $file) {
    $file = (object)$file;
    if ($file->list && empty($file->remove)) {
      $href = file_create_url($file->filepath);
      $text = $file->description ? $file->description : $file->filename;
      $rows[] = array(l($text, $href), format_size($file->filesize));
    }
  }
  if (count($rows)) {
    return theme('table', $header, $rows, array('id' => 'attachments'));
  }
}
/**
 * Determine how much disk space is occupied by a user's uploaded files.
 *
 * @param $uid
 *   The integer user id of a user.
 * @return
 *   The amount of disk space used by the user in bytes.
 */
function islandora_upload_space_used($uid) {
  return file_space_used($uid);
}

/**
 * Determine how much disk space is occupied by uploaded files.
 *
 * @return
 *   The amount of disk space used by uploaded files in bytes.
 */
function islandora_upload_total_space_used() {
  return db_result(db_query('SELECT SUM(f.filesize) FROM {files} f INNER JOIN {attach_files} u ON f.fid = u.fid'));
}

/**
 * Saves, Updates or Deletes files attached to node.
 *
 */
function islandora_upload_save(&$node, $uid) {
  if (empty($node->files) || !is_array($node->files)) {
    return;
  }

  $new_pids = array();

  foreach ($node->files as $fid => $file) {
    // Convert file to object for compatibility
    $file = (object)$file;
    /*
    $fedora_item = new Fedora_Item($PID);
    if  ($fedora_item->exists())  {
      $state = "D";
      $label = ""; // needs to be filled in with objects label.
      $ownerId = $node->uid; //The object owner is the node owner.
      $log_message = "Node {NID:" . $node->nid . "} created by {UID:" . $node->uid . "} which is associate with this object has been deleted by user {" . $uid . "}.";
      $fedora_item->modify_object($label, $state, $ownerId, $logMessage, TRUE);
      $fedora_item->purge($log_message, TRUE); //remove the fedora object
    }
    */
    // Remove file. Process removals first since no further processing
    // will be required.
    if (!empty($file->remove)) {

      db_query('DELETE FROM {attach_files} WHERE fid = %d AND vid = %d', $fid, $node->vid);

      // If the file isn't used by any other revisions delete it.
      $count = db_result(db_query('SELECT COUNT(fid) FROM {attach_files} WHERE fid = %d', $fid));
      if ($count < 1) {
        file_delete($file->filepath);
        db_query('DELETE FROM {files} WHERE fid = %d', $fid);
      }

      // Remove it from the session in the case of new uploads,
      // that you want to disassociate before node submission.
      unset($node->files[$fid]);
      // Move on, so the removed file won't be added to new revisions.
      continue;
    }

    // Create a new revision, or associate a new file needed.
    if (!empty($node->old_vid) || $file->new) {
      db_query("INSERT INTO {attach_files} (fid, nid, vid, list, description, weight) VALUES (%d, %d, %d, %d, '%s', %d)", $file->fid, $node->nid, $node->vid, $file->list, $file->description, $file->weight);
      //Params for ingest_new_item($pid = '', $state = 'A', $label = '', $owner = '')
      $fedora_item = Fedora_Item::ingest_new_item(Fedora_Item::get_next_PID_in_namespace("islandora"), 'A', 'node_file');
      $fedora_item->add_datastream_from_file($file->filepath, "OBJ");
      $fedora_item->add_relationship("fedora:isMemberOfCollection", "islandora:sp_generic_collection");
      array_push($new_pids, $fedora_item->pid);
    }
    // Update existing revision.
    else {
      db_query("UPDATE {attach_files} SET list = %d, description = '%s', weight = %d WHERE fid = %d AND vid = %d", $file->list, $file->description, $file->weight, $file->fid, $node->vid);
    }
  }

  foreach ($new_pids as $pid) {
    db_query("INSERT INTO {node_fedora_objects} (nid, pid, ownerid) VALUES (%d, '%s', %d)", $node->nid, $pid, $uid);
  }
  //return $new_pids;
}

/**
 *  Delete File records from {attach_files} and {files} table when node is deleted.
 *
 */
function islandora_upload_delete($node) {
  $files = array();
  $result = db_query('SELECT DISTINCT f.* FROM {attach_files} u INNER JOIN {files} f ON u.fid = f.fid WHERE u.nid = %d', $node->nid);
  while ($file = db_fetch_object($result)) {
    $files[$file->fid] = $file;
  }

  foreach ($files as $fid => $file) {
    // Delete all files associated with the node
    db_query('DELETE FROM {files} WHERE fid = %d', $fid);
    file_delete($file->filepath);
  }

  // Delete all file revision information associated with the node
  db_query('DELETE FROM {attach_files} WHERE nid = %d', $node->nid);
}

/**
 *  Delete file revision from {attach_files} and {files} table when node is in the deleted revision state.
 *
 */
function islandora_upload_delete_revision($node) {
  if (is_array($node->files)) {
    foreach ($node->files as $file) {
      // Check if the file will be used after this revision is deleted
      $count = db_result(db_query('SELECT COUNT(fid) FROM {attach_files} WHERE fid = %d', $file->fid));

      // if the file won't be used, delete it
      if ($count < 2) {
        db_query('DELETE FROM {files} WHERE fid = %d', $file->fid);
        file_delete($file->filepath);
      }
    }
  }

  // delete the revision
  db_query('DELETE FROM {attach_files} WHERE vid = %d', $node->vid);
}

function islandora_upload_load($node) {
  $files = array();

  if ($node->vid) {
    $result = db_query('SELECT * FROM {files} f INNER JOIN {attach_files} r ON f.fid = r.fid WHERE r.vid = %d ORDER BY r.weight, f.fid', $node->vid);
    while ($file = db_fetch_object($result)) {
      $files[$file->fid] = $file;
    }
  }

  return $files;
}

/**
 * When a file is uploaded this function will be called
 * to determine the MIME Type
 *
 * @param $file
 *  A file that is uploaded by the user
 *
 */

function islandora_check_mime($file) {

if (!empty($file)) {
// Grabs the default list of extensions currently defined
// in islandora_upload.admin.inc
$extensions = variable_get('upload_extensions_default', 'jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp');

// Calls the filefield_validate_extensions which
// utilizes the mimedetect module from within
$mime = implode(filefield_validate_extensions($file, $extensions));

return $mime;
}

}

/**
 * Menu-callback for JavaScript-based uploads.
 */
function islandora_upload_js() {
  $cached_form_state = array();
  $files = array();

  // Load the form from the Form API cache.
  if (!($cached_form = form_get_cache($_POST['form_build_id'], $cached_form_state)) || !isset($cached_form['#node']) || !isset($cached_form['attachments'])) {
    form_set_error('form_token', t('Validation error, please try again. If this error persists, please contact the site administrator.'));
    $output = theme('status_messages');
    print drupal_to_js(array('status' => TRUE, 'data' => $output));
    exit();
  }

  $form_state = array('values' => $_POST);

  // Handle new uploads, and merge tmp files into node-files.
  islandora_upload_node_form_submit($cached_form, $form_state);

  if (!empty($form_state['values']['files'])) {
    foreach ($form_state['values']['files'] as $fid => $file) {
      if (isset($cached_form['#node']->files[$fid])) {
        $files[$fid] = $cached_form['#node']->files[$fid];
      }
    }
  }

  $node = $cached_form['#node'];

  $node->files = $files;

  $form = _islandora_upload_form($node);

  unset($cached_form['attachments']['wrapper']['new']);
  $cached_form['attachments']['wrapper'] = array_merge($cached_form['attachments']['wrapper'], $form);

  $cached_form['attachments']['#collapsed'] = FALSE;

  form_set_cache($_POST['form_build_id'], $cached_form, $cached_form_state);

  foreach ($files as $fid => $file) {
    if (is_numeric($fid)) {
      $form['files'][$fid]['description']['#default_value'] = $form_state['values']['files'][$fid]['description'];
      $form['files'][$fid]['list']['#default_value'] = !empty($form_state['values']['files'][$fid]['list']);
      $form['files'][$fid]['remove']['#default_value'] = !empty($form_state['values']['files'][$fid]['remove']);
      $form['files'][$fid]['weight']['#default_value'] = $form_state['values']['files'][$fid]['weight'];
    }
  }

  // Render the form for output.
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
    '#tree' => FALSE,
    '#parents' => array(),
  );

  $empty_form_state = array();
  $data = &$form;
  $data['__drupal_alter_by_ref'] = array(&$empty_form_state);
  drupal_alter('form', $data, 'islandora_upload_js');

  $form_state = array('submitted' => FALSE);
  $form = form_builder('islandora_upload_js', $form, $form_state);
  $output = theme('status_messages') . drupal_render($form);

  // We send the updated file attachments form.
  // Don't call drupal_json(). ahah.js uses an iframe and
  // the header output by drupal_json() causes problems in some browsers.
  //$form = _islandora_upload_form($node);
  //$output = theme('status_messages') . drupal_render($form);
  print drupal_to_js(array('status' => TRUE, 'data' => $output));
  exit;
}

/**
 * When a Drupal Node is deleted this function will delete
 * all associated Fedora Objects Datasteams.
 *
 * @param $node
 *   A node object.
 * @param $uid
 *   The current User ID. (This is the user deleting the node)
 *
 */

function islandora_upload_delete_fedora_object_datastreams($node, $uid) {

  //Grab all pid attached to the drupal node
  $sql = "SELECT pid FROM {node_fedora_objects} WHERE nid = '" . $node->nid . "'";
  $results = db_query($sql);

  while ($PID = db_result($results)) { // Get the next result, which will/must always be a single field
    $fedora_item = new Fedora_Item($PID);
    if  ($fedora_item->exists())  {
      $dsid_array = $fedora_item->get_datastreams_list_as_array();
      foreach ($dsid_array as $dsid) {
        $state = 'D'; //Set the datastream to deleted
        $log_message = "Node {NID:" . $node->nid . "} created by {UID:" . $node->uid . "} which is associate with this object has been deleted by user {" . $uid . "}.";
        $fedora_item->set_datastream_state($dsid, $state, $log_message);
      }
    }
  }
  db_query("DELETE FROM {node_fedora_objects} where nid = '" . $node->nid . "'");
}

/**
 * When a Drupal Node is deleted this function will purge
 * all associated Fedora Objects
 *
 * @param $node
 *   A node object.
 * @param $uid
 *   The current User ID. (This is the user deleting the node)
 *
 */

function islandora_upload_purge_fedora_objects($node, $uid) {

  //Grab all pid attached to the drupal node
  $sql = "SELECT pid FROM {node_fedora_objects} WHERE nid = '" . $node->nid . "'";
  $results = db_query($sql);

  while ($PID = db_result($results)) { // Get the next result, which will/must always be a single field
    $fedora_item = new Fedora_Item($PID);
    if  ($fedora_item->exists())  {
      $log_message = "Node {NID:" . $node->nid . "} created by {UID:" . $node->uid . "} which is associate with this object has been purged by user {" . $uid . "}.";
      $fedora_item->purge($log_message, TRUE); //remove the fedora object
    }
  }
  db_query("DELETE FROM {node_fedora_objects} where nid = '" . $node->nid . "'");
}

/**
 * When a Drupal Node is deleted this function will set the fedora object state
 * of all associated Fedora Objects to D (Deleted).
 *
 * @param $node
 *   A node object.
 * @param $uid
 *   The current User ID. (This is the user deleting the node)
 *
 */

function islandora_upload_delete_fedora_objects($node, $uid) {

  //Grab all pid attached to the drupal node
  $sql = "SELECT pid FROM {node_fedora_objects} WHERE nid = '" . $node->nid . "'";
  $results = db_query($sql);

  while ($PID = db_result($results)) { // Get the next result, which will/must always be a single field
    $fedora_item = new Fedora_Item($PID);
    if  ($fedora_item->exists())  {
      $state = "D";
      $label = ""; // needs to be filled in with objects label.
      $ownerId = $node->uid; //The object owner is the node owner.
      $log_message = "Node {NID:" . $node->nid . "} created by {UID:" . $node->uid . "} which is associate with this object has been deleted by user {" . $uid . "}.";
      $fedora_item->modify_object($label, $state, $ownerId, $logMessage, TRUE);
    }
  }
  db_query("DELETE FROM {node_fedora_objects} where nid = '" . $node->nid . "'");
}

/**
 * Used to get the node creator's UID.
 *
 * @param $pid
 *   The pid of the file attached to a node.
 * @return $result
 *   The Private User Name (owner of the node/file) or false
 *
 */

function get_file_private_uid($pid) {

  //Grab privateUID of a file using the PID
  $sql = "SELECT privateUID FROM {islandora_attachment_permissions} WHERE pid = '" . $pid . "'";
  $results = db_query($sql);
  $UID = db_result($results);
  if ($UID == "" || $UID == NULL) {
    $result = FALSE; //return false if file was not private
  }
  else {
    $result = $UID; //return owner UID
  }
  return $result;
}

/**
 * Used to get user ID's that are set as able to access a given fill.  Uses
 * PID to look up ID of {islandora_attachment_permissions} and then uses the ID
 * to grab any set group ids from {islandora_attachment_permission_users}
 *
 * @param $pid
 *   The pid of the file attached to a node.
 * @return $result
 *   An array of User Names(owner of the node/file) or false
 *
 */

function get_file_accessable_users($pid) {
  $result = array();
  //Grab iapid (islandora attachment permission ID) of a file using the PID to look up
  $sql = "SELECT iapid FROM {islandora_attachment_permissions} WHERE pid = '" . $pid . "'";
  $results = db_query($sql);
  $iapid = db_result($results);

  //ubid is the User Binding ID
  //Find all groups associate with islandora attachment permission ID
  $sql = "SELECT uid FROM {islandora_attachment_permission_users} WHERE ubid = '" . $iapid . "'";
  $results = db_query($sql);

  while ($UBID = db_result($results)) { // Get the next result, which will/must always be a single field
    $sql2 = "SELECT name FROM {users} WHERE uid = '" . $UBID . "'";
    $user_result = db_query($sql2);
    $user_name = db_result($user_result);
    $result[] = $user_name;
  }

  if (empty($result)) {
    $result[] = FALSE;
  }
  return $result;
}

/**
 * Used to get role ID's that are set as able to access a given file.  Uses
 * PID to look up ID of {islandora_attachment_permissions} and then uses the ID
 * to grab any set role ids from {islandora_attachment_permission_groups}
 *
 * @param $pid
 *   The pid of the file attached to a node.
 * @return $result
 *   An array of allowed role Names.
 *
 */

function get_file_accessable_roles($pid) {
  $result = array();
  //Grab iapid (islandora attachment permission ID) of a file using the PID to look up
  $sql = "SELECT iapid FROM {islandora_attachment_permissions} WHERE pid = '" . $pid . "'";
  $results = db_query($sql);
  $iapid = db_result($results);

  //rbid is the Role Binding ID
  //Find all roles associate with islandora attachment permission ID
  $sql = "SELECT rid FROM {islandora_attachment_permission_groups} WHERE rbid = '" . $iapid . "'";
  $results = db_query($sql);

  while ($RID = db_result($results)) { // Get the next result, which will/must always be a single field
    $sql2 = "SELECT name FROM {role} WHERE rbid = '" . $RID . "'";
    $role_result = db_query($sql2);
    $role_name = db_result($role_result);
    $result[] = $role_name;
  }

  if (empty($result)) {
    $result[] = FALSE;
  }
  return $result;
}

function islandora_upload_file_permission_form_submit($form, &$form_state) {
  //check files that are set and if not set set to public?

  // url example ?q=node/islandora_file_permissions/22
  // arg(0) = node, arg(1) = islandora_file_permissions, arg(2) = 22
  $node_id = "";
  if (arg(1) == 'islandora_file_permissions' && is_numeric(arg(2))) {
    $node_id = arg(2); // Grab NID from URL
  }
  $form_state['redirect'] = 'node/'. $node_id; // Redirects the user.
}

function islandora_upload_permissions_form() {

  // This form calls the form builder function via the
  // drupal_get_form() function which takes the name of this form builder
  // function as an argument. It returns the results to display the form.
  return drupal_get_form('islandora_upload_file_permission_form');

}

/**
 * This function is called the "form builder". It builds the form.
 * Notice, it takes one argument, the $form_state
 */
function islandora_upload_file_permission_form($form_state) {

  //
  if ($_POST['op'] == "Save Permissions" && $_POST['files'] != '0') {
    //if($_POST['files'] == "all");
    //set for all files
    print_r($_POST);
    //grab pid and id
    //query permissions
    //if results
      //$exists = TRUE;
     //else $exists = FALSE;
       //empty roles DB and USER DB
        switch ($permission_radios)  {
          case '0':
            if ($exists) {
              //update query
            }
            else {
              //insert query
            }
            break;
          case '1':
            if ($exists) {
              //update query
            }
            else {
              //insert query
            }
            break;
          case '2':
            if  ($exists) {
              //update query
              if (isset($_POST['roles'])) {
                //for each $_POST['roles']
                //insert into permission_roles id, rid
              }

            }
            else {
              //insert query

              //select query to get ID
              if (isset($_POST['roles'])) {
                //for each $_POST['roles']
                //insert into permission_roles id, rid
              }
            }

            break;
          case '3':
            if ($exists) {
              //update query
              if (isset($_POST['users'])) {
                //for each $_POST['users']
                 //insert into permission_users id, uid
              }

            }
            else {
              //insert query

              //select query to get ID
              if (isset($_POST['users'])) {
                //for each $_POST['users']
                 //insert into permission_users id, uid
              }
            }
            break;
          }


  }
  else {
    //need to set a default to public incase user just clicked finished and didn't manually assign permissions
    // but only if there isn't already a permission for that file

    //for each file get pid
      //query permissions table with PID=PID
        //if !result
          //insert new record with public permissions
  }
  drupal_add_js(drupal_get_path('module', 'islandora_upload') . '/permission_selectbox.js');
  drupal_add_css(drupal_get_path('module', 'islandora_upload') .'/islandora_upload.css');

  // url example ?q=node/islandora_file_permissions/22
  // arg(0) = node, arg(1) = islandora_file_permissions, arg(2) = 22
  if (arg(1) == 'islandora_file_permissions' && is_numeric(arg(2))) {
    $node_id = arg(2); // Grab NID from URL
  }
  $results = db_query("SELECT n.pid,a.description FROM {node_fedora_objects} n INNER JOIN {attach_files} a ON a.nid = n.nid WHERE n.nid = %d", $node_id);
  $file_array = array();
  $file_array['0'] = ""; //white space for first record of the drop down.
  //$file_array[base_path() . "?q=filepermissions/get/all"] = "Set All"; //white space for first record of the drop down.
  while ($row = db_fetch_object($results)) {
    $file_array[base_path() . "?q=filepermissions/get/" . $row->pid] = $row->description;
  }
  $form['description'] = array(
    '#id' => 'islandora_files_description',
    '#type' => 'item',
    '#description' => t('Select a file to set file access permissions, if you don\'t care about access permission just you can skip this process by just clicking "Finished" and all files will be assigned public access. Important Note: Be sure to click the "Save Permissions" button before changing to a new file and set all files before this way before clicking Finished or they will default to public.'),
  );
  // Select Box with all the FID and file descriptions(labels)
  $form['files'] = array(
    '#id' => 'islandora_files',
    '#type' => 'select',
    '#title' => t('Select File'),
    '#options' => $file_array,
  );
  // add in style="display: none;" to prefix div for method two of the UI
  $form['permissions'] = array(
    '#type' => 'fieldset',
    //'#access' => user_access('attach files'),
    '#title' => t('File Permissions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('When finished setting the files access permissions click "Save Permissions" before selection another file or clicking "Finished". Please note that a file can only have one of the following permission options: Public Access, Private Access, Roles Based Access, or User Based Access.  If role based you must select off all roles that you wish to grant access to, and if user based you must check all users you wish to grant file access to.'),
    '#prefix' => '<div class="permission-container">',
    '#suffix' => '</div>'
  );
  $form['permissions']['permission_radios'] = array(
    '#id' => 'permission_options',
    '#type' => 'radios',
    '#title' => t('Permission Category'),
    '#default_value' => 0,
    '#options' => array(t('Public'), t('Private'), t('Roles'), t('Users')),
    '#prefix' => '<span class="permission_radio_span">',
    '#suffix' => '</span>',
  );
  // Need hidden to get the permission_results div to show which is used by ajax.
  $form['permissions']['results_user'] = array(
   '#type' => 'hidden',
   '#value' => '',
   '#prefix' => '<div id="permission_result_users" style="display: none;">',
   '#suffix' => '</div>',
  );
  // Need hidden to get the permission_results div to show which is used by ajax.
  $form['permissions']['results_role'] = array(
    '#type' => 'hidden',
    '#value' => '',
    '#prefix' => '<div id="permission_result_roles" style="display: none;">',
    '#suffix' => '</div>',
  );
  $form['permissions']['save'] = array(
    '#id' => 'my_button',
    '#type' => 'button',
    '#value' => 'Save Permissions',
  );
//  $form['permissions']['checkbox_users'] = array(
//  '#type' => 'checkboxes',
//  '#title' => t('Default options'),
//  '#options' => array(
//    'status' => t('Published'),
//    'moderate' => t('In moderation queue'),
//    'promote' => t('Promoted to front page'),
//    'sticky' => t('Sticky at top of lists'),
//    'revision' => t('Create new revision'),
//  ),
//  '#description' => t('Users with the <em>administer nodes</em> permission will be able to override these options.'),
//  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Finished',
  );
  return $form;
}
function islandora_upload_get_by_file_id($fedora_pid) {
  //string pad variables for better spacings
  $items = array();
  $checked_role_array = array();
  $checked_user_array = array();
  $checked_role_array["prechecked-islandora-upload"] = "Array Exists";
  $checked_user_array["prechecked-islandora-upload"] = "Array Exists";


  //get owner id of the file
  $ownerID = "";
  $radio_option = 0;

  $results = db_query("SELECT ownerid FROM {node_fedora_objects} WHERE pid = '%s'", $fedora_pid);
  if ($owner = db_result($results)) {
    $ownerID = $owner;
  }

  //get binding id and then get all user / roles if they exists
  $results_check = db_query("SELECT iapid, public_permission, private_permission FROM {islandora_attachment_permissions} WHERE pid = '%s'", $fedora_pid);
  if ($row = db_fetch_object($results_check)) {

    $binding_id = $row->iapid;
    if ($row->public_permission) {
      $radio_option = 0;

    }
    elseif ($row->private_permission) {
      $radio_option = 1;
    }
    else {

      //grab all roles saved
      $results_roles = db_query("SELECT rid FROM {islandora_attachment_permission_roles} WHERE rbid = %d", $binding_id);
      while ($row_roles = db_fetch_object($results_roles)) {
        $checked_role_array[$row_roles->rid] = $row_roles->rid;
      }
      //if roles were pulled set option to 2
      if (count($checked_role_array) > 1) {
        $radio_option = 2;
      }
      else {
        //otherwise try to get grab all users saved
        $results_users = db_query("SELECT uid FROM {islandora_attachment_permission_users} WHERE ubid = %d", $binding_id);
        while ($row_users = db_fetch_object($results_users)) {
          $checked_user_array[$row_users->uid] = $row_users->uid;
        }

        //if users were pulled set option to 3
        if (count($checked_user_array) > 1) {
          $radio_option = 3;
        }
        else {
         $radio_option = 0; //Should ever get called but it's a fail safe
        }
      }
    }
  }
  //get user count
  $count_users = 0;
  $results = db_query("SELECT count(uid) FROM {users} where uid NOT IN (0, %d)", $ownerID);
  if ($count_rows = db_result($results)) {
    $count_users = $count_rows;
  }

  //get role count
  $count_roles = 0;
  $results = db_query("SELECT rid, name FROM {role}");
  if ($count_rows = db_result($results)) {
    $count_roles = $count_rows;
  }

  // Pass the Radio button to be checked off the default is Public.
  // edit-permission-radios-0 is Public with a value 0.
  // edit-permission-radios-1 is Private with a value 1.
  // edit-permission-radios-2 is Roles with a value 2.
  // edit-permission-radios-3 is Users with a value 3.
  switch ($radio_option) {
    case 0:
      $radio_button = "edit-permission-radios-0";
      break;
    case 1:
      $radio_button = "edit-permission-radios-1";
      break;
    case 2:
      $radio_button = "edit-permission-radios-2";
      break;
    case 3:
      $radio_button = "edit-permission-radios-3";
      break;

  }
  $items[] = array(
    'radio_checked' => $radio_option,
    'number_of_users' => $count_users,
    'number_of_roles' => $count_roles,
    'owner_id' => $ownerID,
    'debug' => $radio_button);

 // $file_array['all'] = "Set All"; //white space for first record of the drop down.
  $results = db_query("SELECT uid, name FROM {users} where uid NOT IN (0,%d)", $ownerID);
  while ($row = db_fetch_object($results)) {
    //if current user is one of the saved users send checked = TRUE so the JS checkes the box on load
    if (array_key_exists($row->uid, $checked_user_array) ) {
      $checked = TRUE;
    }
    else {
      $checked = FALSE;
    }
    $items[] = array(
      'data' => $row->name,
      'id' => $row->uid,
      'checked' => $checked,
      'debug' => "debug message user");
  }

  $results = db_query("SELECT rid, name FROM {role}");
  while ($row = db_fetch_object($results)) {

    //if role is one of the saved roles send checked = TRUE so the JS checkes the box on load
    if (array_key_exists($row->rid, $checked_role_array) ) {
      $checked = TRUE;
    }
    else {
      $checked = FALSE;
    }

    $items[] = array(
      'data' => $row->name,
      'id' => $row->rid,
      'checked' => $checked,
      'owner' =>  FALSE,
      'debug' => "debug message role");
  }

// create a JSON object. The object will contain a property named \93products\94 that will be set with the $items variable.
  echo json_encode($items);
  exit;
}
